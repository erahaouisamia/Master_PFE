pipeline {
	agent{
		node{
			label 'master'
		}
	}
	triggers {
		pollSCM('* * * * *') //runs this pipeline on every commit
		//cron('30 23 * * *') //run at 23:30:00 
    	}

	//environment {
    		//JAVA_TOOL_OPTIONS = "-Duser.home=/var/maven"
    	//}

	stages {
		stage('Git Checkout'){
            		steps{
		    		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'app']]]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitCred', url: 'https://github.com/erahaouisamia/repo_idemia/']]])
	    		}
        	}
        	stage('Backend') {
			agent{
				docker{
					image 'maven:3.6.3-jdk-11'
					//args "-v ~/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2"
				}
			}
			stages{
				stage('Compile'){
					steps {
						dir("${env.WORKSPACE}/app/crud-api")
						{
							sh label: '', script: 'mvn clean compile'
			    			}
					}
				}
				stage('Unit test Backend') {
					steps {
						dir("${env.WORKSPACE}/app/crud-api"){
							sh label: '', script: 'mvn clean test'
						}
					}
					post {
						always {
							junit allowEmptyResults: true, testResults: 'app/crud-api/target/surefire-reports/*.xml'
						}
					}
				}
				stage('build jar'){
					steps{
						dir("${env.WORKSPACE}/app/crud-api"){
							sh 'mvn clean package'
						}
					}
				}
			}
		}
		stage('Frontend'){
			agent {
				docker { image 'node:latest' }
			}
			stages {
				//verifier l'installation de npm
				stage('Install') {
					steps { sh 'npm install' }
				}
				stage('Build') {
					steps { 
						dir("${env.WORKSPACE}/app/crud-frontend")
						{
							sh 'npm run build -- --prod' 
						}
					}
				}
			}
		}
		stage ('docker image build api')
		{
		    steps {
			dir("${env.WORKSPACE}/app/crud-api"){
				sh 'docker build -t backend:v1 -f./Dockerfile .'
			}
		    }
		}
		stage ('docker image build api')
			{
			    steps {
				dir("${env.WORKSPACE}/app/crud-frontend"){
					sh 'docker build -t frontend:v1 -f ./Dockerfile .' 
				}
			    }
			}
        	stage ('docker image push to Nexus') {
		    steps {
			withCredentials([usernamePassword(credentialsId: 'nexus-registry', usernameVariable: 'nexus_user', passwordVariable: 'nexus_password')]){
				sh 'docker login -u \$nexus_user -p \$nexus_password @Ip_public:8083'
				sh 'docker push backend:v1'
				sh 'docker push frontend:v1'                        
		    }
        	}
		stage ('helm push to Nexus') {
			agent{
				docker{
					image 'idd1/helm'
					//args "-v ~/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2"
				}
			}
		    	steps {           
				withCredentials([usernamePassword(credentialsId: 'nexus-registry', usernameVariable: 'nexus_user', passwordVariable: 'nexus_password')]){
					sh 'helm repo add helmRepo http://172.31.16.10:8081/repository/helmRepo/ --username \$nexus_user --password \$nexus_password'
					sh 'helm nexus-push helmRepo app/HelmChart --username \$nexus_user --password \$nexus_password'
		    	}
        	}
    	}
}
