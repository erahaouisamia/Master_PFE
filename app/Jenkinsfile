pipeline {
	agent{
		node{
			label 'master'
		}
	}

	stages {
		stage('Git Checkout'){
			steps{
				cleanWs()
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'app']]]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitCred', url: 'https://github.com/erahaouisamia/repo_idemia/']]])
			}
        	}
		stage('backend'){
			steps {
				dir("${env.WORKSPACE}/app/crud-api"){
					withDockerContainer(image: 'maven:3.6.3-openjdk-8')
					{
						sh label: '', script: 'mvn clean compile'
						sh 'mvn clean package'
					}
				}
			}
			post {
			    success {
			      sh 'docker image rm -f maven:3.6.3-openjdk-8'
			    }
          		}
		}
		stage('Frontend'){
			steps {
				dir("${env.WORKSPACE}/app/crud-frontend")
				{
					withDockerContainer(image: 'node:latest'){
						sh 'npm install'
						sh 'npm run build -- --outputPath=dist/out --prod' 
					}
				}
			}
			post {
			    success {
			      sh 'docker image rm -f node:latest'
			    }
          		}
		}
		stage('build docker images'){
			steps{
				dir("${env.WORKSPACE}/app/crud-api"){
					sh 'docker build -t backend:${BUILD_NUMBER} .'
				}
				dir("${env.WORKSPACE}/app/crud-frontend"){
					sh 'docker build -t frontend:${BUILD_NUMBER} .'
				}
			}
		}
        	stage ('push docker images to Nexus') {
		    steps {
			withCredentials([usernamePassword(credentialsId: 'nexus-registry', usernameVariable: 'nexus_user', passwordVariable: 'nexus_password')]){
			//withDockerRegistry(credentialsId: 'nexus-registry', url: 'http://172.17.0.2:8083') {
				sh 'docker login -u \$nexus_user -p \$nexus_password repos.nexus.com:48083'
				sh 'docker tag backend:${BUILD_NUMBER} repos.nexus.com:48083/backend:\${BUILD_NUMBER}'
				sh 'docker push repos.nexus.com:48083/backend:\${BUILD_NUMBER}'
				sh 'docker tag frontend:\${BUILD_NUMBER} repos.nexus.com:48083/frontend:\${BUILD_NUMBER}'
				sh 'docker push repos.nexus.com:48083/frontend:\${BUILD_NUMBER}'
			}
		    }
        	}
		stage ('helm push to Nexus repository') {
			steps {
				dir("${env.WORKSPACE}/app"){
					withDockerContainer(args:'--entrypoint=""', image: 'dtzar/helm-kubectl'){
						withCredentials([usernamePassword(credentialsId: 'nexus-registry', usernameVariable: 'nexus_user', passwordVariable: 'nexus_password')]){
							//sh 'helm plugin install --version master https://github.com/sonatype-nexus-community/helm-nexus-push.git'
							//sh 'helm repo add helmRepo https://repos.nexus.com/repository/helmRepo/ --username \$nexus_user --password \$nexus_password'
							sh 'helm package helm-chart'
							sh 'curl --insecure -u \$nexus_user:\$nexus_password https://repos.nexus.com/repository/helmRepo/ --upload-file *.tgz -v'
							//sh 'helm nexus-push helmRepo helm-chart/ --username \$nexus_user --password \$nexus_password'
						}
		    			}
        			}
			}
			post {
			    success {
				    sh 'docker image rm -f dtzar/helm-kubectl'
			    }
          		}
		}
    	}
	post {
	    success {
	      deleteDir()
	    }
  	}
}
